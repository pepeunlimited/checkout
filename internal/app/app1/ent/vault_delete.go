// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pepeunlimited/checkout/internal/app/app1/ent/predicate"
	"github.com/pepeunlimited/checkout/internal/app/app1/ent/vault"
)

// VaultDelete is the builder for deleting a Vault entity.
type VaultDelete struct {
	config
	predicates []predicate.Vault
}

// Where adds a new predicate to the delete builder.
func (vd *VaultDelete) Where(ps ...predicate.Vault) *VaultDelete {
	vd.predicates = append(vd.predicates, ps...)
	return vd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (vd *VaultDelete) Exec(ctx context.Context) (int, error) {
	return vd.sqlExec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (vd *VaultDelete) ExecX(ctx context.Context) int {
	n, err := vd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (vd *VaultDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: vault.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vault.FieldID,
			},
		},
	}
	if ps := vd.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return sqlgraph.DeleteNodes(ctx, vd.driver, _spec)
}

// VaultDeleteOne is the builder for deleting a single Vault entity.
type VaultDeleteOne struct {
	vd *VaultDelete
}

// Exec executes the deletion query.
func (vdo *VaultDeleteOne) Exec(ctx context.Context) error {
	n, err := vdo.vd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &ErrNotFound{vault.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (vdo *VaultDeleteOne) ExecX(ctx context.Context) {
	vdo.vd.ExecX(ctx)
}
