// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/pepeunlimited/checkout/internal/app/app1/ent/vault"
)

// Vault is the model entity for the Vault schema.
type Vault struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount int64 `json:"amount,omitempty"`
	// ReferenceNumber holds the value of the "reference_number" field.
	ReferenceNumber string `json:"reference_number,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Vault) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullInt64{},  // amount
		&sql.NullString{}, // reference_number
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Vault fields.
func (v *Vault) assignValues(values ...interface{}) error {
	if m, n := len(values), len(vault.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	v.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field amount", values[0])
	} else if value.Valid {
		v.Amount = value.Int64
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field reference_number", values[1])
	} else if value.Valid {
		v.ReferenceNumber = value.String
	}
	return nil
}

// Update returns a builder for updating this Vault.
// Note that, you need to call Vault.Unwrap() before calling this method, if this Vault
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Vault) Update() *VaultUpdateOne {
	return (&VaultClient{v.config}).UpdateOne(v)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (v *Vault) Unwrap() *Vault {
	tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Vault is not a transactional entity")
	}
	v.config.driver = tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Vault) String() string {
	var builder strings.Builder
	builder.WriteString("Vault(")
	builder.WriteString(fmt.Sprintf("id=%v", v.ID))
	builder.WriteString(", amount=")
	builder.WriteString(fmt.Sprintf("%v", v.Amount))
	builder.WriteString(", reference_number=")
	builder.WriteString(v.ReferenceNumber)
	builder.WriteByte(')')
	return builder.String()
}

// Vaults is a parsable slice of Vault.
type Vaults []*Vault

func (v Vaults) config(cfg config) {
	for _i := range v {
		v[_i].config = cfg
	}
}
