// Code generated by entc, DO NOT EDIT.

package vault

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/pepeunlimited/checkout/internal/app/app1/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Vault {
	return predicate.Vault(
		func(s *sql.Selector) {
			s.Where(sql.EQ(s.C(FieldID), id))
		},
	)
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Vault {
	return predicate.Vault(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	},
	)
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Vault {
	return predicate.Vault(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	},
	)
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Vault {
	return predicate.Vault(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	},
	)
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Vault {
	return predicate.Vault(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	},
	)
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Vault {
	return predicate.Vault(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	},
	)
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Vault {
	return predicate.Vault(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	},
	)
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Vault {
	return predicate.Vault(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	},
	)
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Vault {
	return predicate.Vault(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	},
	)
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v int64) predicate.Vault {
	return predicate.Vault(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	},
	)
}

// ReferenceNumber applies equality check predicate on the "reference_number" field. It's identical to ReferenceNumberEQ.
func ReferenceNumber(v string) predicate.Vault {
	return predicate.Vault(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReferenceNumber), v))
	},
	)
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v int64) predicate.Vault {
	return predicate.Vault(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAmount), v))
	},
	)
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v int64) predicate.Vault {
	return predicate.Vault(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAmount), v))
	},
	)
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...int64) predicate.Vault {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vault(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAmount), v...))
	},
	)
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...int64) predicate.Vault {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vault(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAmount), v...))
	},
	)
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v int64) predicate.Vault {
	return predicate.Vault(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAmount), v))
	},
	)
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v int64) predicate.Vault {
	return predicate.Vault(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAmount), v))
	},
	)
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v int64) predicate.Vault {
	return predicate.Vault(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAmount), v))
	},
	)
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v int64) predicate.Vault {
	return predicate.Vault(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAmount), v))
	},
	)
}

// ReferenceNumberEQ applies the EQ predicate on the "reference_number" field.
func ReferenceNumberEQ(v string) predicate.Vault {
	return predicate.Vault(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReferenceNumber), v))
	},
	)
}

// ReferenceNumberNEQ applies the NEQ predicate on the "reference_number" field.
func ReferenceNumberNEQ(v string) predicate.Vault {
	return predicate.Vault(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReferenceNumber), v))
	},
	)
}

// ReferenceNumberIn applies the In predicate on the "reference_number" field.
func ReferenceNumberIn(vs ...string) predicate.Vault {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vault(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldReferenceNumber), v...))
	},
	)
}

// ReferenceNumberNotIn applies the NotIn predicate on the "reference_number" field.
func ReferenceNumberNotIn(vs ...string) predicate.Vault {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Vault(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldReferenceNumber), v...))
	},
	)
}

// ReferenceNumberGT applies the GT predicate on the "reference_number" field.
func ReferenceNumberGT(v string) predicate.Vault {
	return predicate.Vault(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReferenceNumber), v))
	},
	)
}

// ReferenceNumberGTE applies the GTE predicate on the "reference_number" field.
func ReferenceNumberGTE(v string) predicate.Vault {
	return predicate.Vault(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReferenceNumber), v))
	},
	)
}

// ReferenceNumberLT applies the LT predicate on the "reference_number" field.
func ReferenceNumberLT(v string) predicate.Vault {
	return predicate.Vault(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReferenceNumber), v))
	},
	)
}

// ReferenceNumberLTE applies the LTE predicate on the "reference_number" field.
func ReferenceNumberLTE(v string) predicate.Vault {
	return predicate.Vault(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReferenceNumber), v))
	},
	)
}

// ReferenceNumberContains applies the Contains predicate on the "reference_number" field.
func ReferenceNumberContains(v string) predicate.Vault {
	return predicate.Vault(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReferenceNumber), v))
	},
	)
}

// ReferenceNumberHasPrefix applies the HasPrefix predicate on the "reference_number" field.
func ReferenceNumberHasPrefix(v string) predicate.Vault {
	return predicate.Vault(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReferenceNumber), v))
	},
	)
}

// ReferenceNumberHasSuffix applies the HasSuffix predicate on the "reference_number" field.
func ReferenceNumberHasSuffix(v string) predicate.Vault {
	return predicate.Vault(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReferenceNumber), v))
	},
	)
}

// ReferenceNumberEqualFold applies the EqualFold predicate on the "reference_number" field.
func ReferenceNumberEqualFold(v string) predicate.Vault {
	return predicate.Vault(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReferenceNumber), v))
	},
	)
}

// ReferenceNumberContainsFold applies the ContainsFold predicate on the "reference_number" field.
func ReferenceNumberContainsFold(v string) predicate.Vault {
	return predicate.Vault(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReferenceNumber), v))
	},
	)
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Vault) predicate.Vault {
	return predicate.Vault(
		func(s *sql.Selector) {
			s1 := s.Clone().SetP(nil)
			for _, p := range predicates {
				p(s1)
			}
			s.Where(s1.P())
		},
	)
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Vault) predicate.Vault {
	return predicate.Vault(
		func(s *sql.Selector) {
			s1 := s.Clone().SetP(nil)
			for i, p := range predicates {
				if i > 0 {
					s1.Or()
				}
				p(s1)
			}
			s.Where(s1.P())
		},
	)
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Vault) predicate.Vault {
	return predicate.Vault(
		func(s *sql.Selector) {
			p(s.Not())
		},
	)
}
